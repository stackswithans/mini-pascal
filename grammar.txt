
program : PROGRAM identifier ; block DOT

block : var_decl_sect? sub_decl_sect? compound_stmt?;


var_decl_sect : VAR var_decl SEMICOL ( var_decl SEMICOL)*;

var_decl : identifier (COMMA identifier)* COLON type 
         ;

type : simple_type
     | array_type
     ;

array_type : ARRAY LBRACK index_range RBRACK OF simple_type;

index_range : integer_constant DOTDOT integer_constant;

simple_type : char | integer | integer;


sub_decl_sect : (proc_decl SEMICOL)*
              | (func_decl SEMICOL)*
              ;

proc_decl : PROCEDURE identifier formal_params SEMICOL block;

func_decl : FUNCTION identifier formal_params COLON type SEMICOL block;

formal_params : LPAR param_section? RPAR; 

param_section: var_decl (SEMICOL var_decl SEMICOL);


compound_stmt: BEGIN statement (SEMICOL statement) END;

statement : simple_stmt
          | struct_stmt
          ;

simple_stmt : variable (ASSIGN expression)? 
            | read_stmt 
            | write_stmt
            ;

read_stmt : READ args;

write_stmt : WRITE args;

args: LPAR variable (COMMA variable)* RPAR

struct_stmt: compound_stmt
           | if_stmt
           | while_stmt
           ;

if_stmt : IF expression THEN statement (ELSE statement)?

while_stmt : WHILE expression do statement

expression : simple_expression (relational_op simple_expression)? ;

simple_expression : (sign)? term (adding_op term)* ;

term : factor (mult_op factor)*;

factor : variable | constant | LPAR expression RPAR | NOT factor;

rel_op : EQ 
       | NOTEQ 
       | LESS 
       | LESSEQ 
       | GREATEREQ 
       | GREATEREQ 
       | OR
       | AND
       ;
       
add_op : PLUSOP
       | SUBOP
       ;

mult_op: MULOP
       | DIV
       | SLASH
       ;

variable : identifier (LPAR [expression] RPAR)?;
